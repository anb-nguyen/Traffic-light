//*******************************************************************************
// Project 		Traffic_light

//*****************************************
#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 1000000UL
#include <util/delay.h>

// Declare functions (these will be in a separate header file in larger programs)
void InitialiseGeneral();
void InitialiseTimer1();

// Declare global variables
volatile unsigned char counter;	// An 'unsigned char' is an 8-bit numeric value, i.e. a single byte
int state = 0;
int faulty = 0;
char ch;

void Redlight()
{
	PORTA = 0b00100001; //expected output from port C => 0x11000000
	_delay_ms(10);
	ch = PINC;
	if(ch != 0x11000000)
	{
		faulty = 1;
	}
}

void RedtoGreen()
{
	PORTA = 0b00001101;//expected output from port C => 0x00110000
	_delay_ms(1000);
	ch = PINC;
	if(ch != 0x00110000)
	{
		faulty = 1;
	}
	_delay_ms(2000);
	PORTA = 0b00000111;//expected output from port C => 0x00000000
	_delay_ms(1000);
	PORTA = 0b00000110;//expected output from port C => 0x00000000
	_delay_ms(3000);
	state++;
}

void GreenLight()
{
	PORTA = 0b00010010; // expected output port C => 0b00001100
	_delay_ms(10);
	ch = PINC;
	if(ch != 0b00001100)
	{
		faulty = 1;
	}
}

void GreentoRed()
{
	PORTA = 0b00001110;//expected output from port C => 0x00110000
	_delay_ms(1000);
	ch = PINC;
	if(ch != 0x00110000)
	{
		faulty = 1;
	}
	_delay_ms(2000);
	PORTA = 0b00000111;//expected output from port C => 0x00000000
	_delay_ms(1000);
	PORTA = 0b00001001;//expected output from port C => 0x00000000
	_delay_ms(3000);
	state = 0;
}

void FaultyLight()
{
	state = 0;
	int fixed = 1;
	PORTA = 0b00110011;//expected output from port C => 0x11001100
	_delay_ms(500);
	ch = PINC;
	if(ch != 0x11001100)
	{
		fixed = 0;
	}
	_delay_ms(500);
	PORTA = 0b00001100;//expected output from port C => 0x00110000
	_delay_ms(500);
	ch = PINC;
	if(ch != 0x00110000)
	{
		fixed = 0;
	}

	_delay_ms(500);
	if(fixed==1)
	{
		faulty = 0;
	}
}
 
int main( void )
{
	InitialiseGeneral();
	counter = 0x00;		// Initialise the variable
	InitialiseTimer1();
	
    while(1)        	// Loop
    {
		/*if(faulty)
		{
			FaultyLight();
			
		}
		else
		{
			switch(state)
			{
				case 0: //main road red
				Redlight();
				break;
				
				case 1: //Main road red to green
				RedtoGreen();
				break;
				
				case 2: //Main Road Green
				GreenLight();
				break;
				
				default ://Main Road Green to red
				GreentoRed();
				break;
			}
		}*/
		PORTA = 0b00100001;
		_delay_ms(1000);	 	
		ch = PINC;
		if(ch==0x11000000)
		{
			PORTA = 0b00001100;
			_delay_ms(1000);
		}
	}
}

void InitialiseGeneral()
{
	DDRC = 0x00;			
	DDRA = 0xFF;			
	PORTA = 0x00;
}

void InitialiseTimer1()		// Configure to generate an interrupt after a 1-Second interval
{
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
	//TCCR1C = 0b00000000;

	// For 1 MHz clock (with 1024 prescaler) to achieve a 1 second interval:
	// Need to count 1 million clock cycles (but already divided by 1024)
	// So actually need to count to (1000000 / 1024 =) 976 decimal, = 3D0 Hex
	OCR1AH = 0x03; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
	OCR1AL = 0xD0;

	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
	TCNT1L = 0b00000000;
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
							// when the timer reaches the set value (in the OCR1A register)

	sei();					// Enable interrupts at global level, set Global Interrupt Enable (I) bit
}

ISR(TIMER1_COMPA_vect) // TIMER1_CompareA_Handler (Interrupt Handler for Timer 1)
{	// Flip the value of the least significant bit of the 8-bit variable
	if(state == 0 ||state == 2 )
	{
		if(10 == counter)
		{
			counter = 0;
			state++;
		}
		else
		{
			counter ++ ;
		}
	}
	
}
